// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "calc.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct matrix
           {
             char name;
             int cols;
             int rows;
             double elem[10][10];
           } matrix;


char S[200]; 
char *pS;

matrix* ans;
int check;


extern int A,B,C,D;
extern double Val;
extern int WE;
static int in=0; 

Fl_Input *input=(Fl_Input *)0;

Fl_Button *calc_btn=(Fl_Button *)0;

void showMatrix()
{
    char str[50];
    printf("%d,%d\n",ans->cols,ans->rows);
    printf("%f,%f\n",ans->elem[0][0],ans->elem[0][1]);
    printf("%f,%f\n",ans->elem[1][0],ans->elem[1][1]);
    fflush(stdout);
    Fl_Window* adw = new Fl_Window (10,10,20+110*ans->rows,20+25*ans->cols);
    for(int i =0; i<ans->rows;i++)
    for(int j =0; j<ans->cols;j++)
    {
      sprintf(str,"%lf",ans->elem[i][j]);
      
      Fl_Button* o = new Fl_Button(10 +j*110, 10+i*25, 110, 25, "");
      o->label((const char*)str);
      o->box(FL_NO_BOX);
			o->labelsize(14);
    }
    adw->show();
}


static void cb_calc_btn(Fl_Button*, void*) {
  strcpy(S,input->value());
  strcat(S,"\n");
if(in==0)
	{init();
	in=1;

  check = 1;
  ans = (matrix*)malloc(sizeof(matrix));
  ans->cols = 5;
  ans->rows = 5;
  ans->elem[0][0]=0;
  ans->elem[0][1]=1;
  ans->elem[1][0]=2;
  ans->elem[1][1]=3;
  };
	
pS=S;
//check = 0;
yyparse();
if (WE==1) {calc_btn->color(FL_RED);}
else {calc_btn->color(48);}
sprintf(S,"%lf",Val);

if(check==1)
{

  showMatrix();
}

history->add(input->value(),0);
input->value("");
result->value(S);
WE=0;
}

Fl_Input *result=(Fl_Input *)0;

Fl_Browser *history=(Fl_Browser *)0;

Fl_Button *off_btn=(Fl_Button *)0;


static void cb_off_btn(Fl_Button*, void*) {
  exit(0);
}

Fl_Button *clear_btn=(Fl_Button *)0;

static void cb_clear_btn(Fl_Button*, void*) {
  input->value("");
}

Fl_Button *ac_btn=(Fl_Button *)0;

static void cb_ac_btn(Fl_Button*, void*) {
  input->value("");
result->value("");
history->clear();
}

Fl_Button *sin_btn=(Fl_Button *)0;

static void cb_sin_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"sin(");
input->value(S);
}

Fl_Button *arc_btn=(Fl_Button *)0;

static void cb_arc_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"arc");
input->value(S);
}

Fl_Button *cos_btn=(Fl_Button *)0;

static void cb_cos_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"cos(");
input->value(S);
}

Fl_Button *ln_btn=(Fl_Button *)0;

static void cb_ln_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"ln(");
input->value(S);
}

Fl_Button *lg_btn=(Fl_Button *)0;

static void cb_lg_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"lg(");
input->value(S);
}

Fl_Button *fact_btn=(Fl_Button *)0;

static void cb_fact_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"fact(");
input->value(S);
}

Fl_Button *power_btn=(Fl_Button *)0;

static void cb_power_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"^");
input->value(S);
}

Fl_Button *sqrt_btn=(Fl_Button *)0;

static void cb_sqrt_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"sqrt(");
input->value(S);
}

Fl_Button *lftbrk_btn=(Fl_Button *)0;

static void cb_lftbrk_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"(");
input->value(S);
}

Fl_Button *rghtbrk_btn=(Fl_Button *)0;

static void cb_rghtbrk_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,")");
input->value(S);
}

Fl_Button *space_btn=(Fl_Button *)0;

static void cb_space_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S," ");
input->value(S);
}

Fl_Button *d_btn=(Fl_Button *)0;

static void cb_d_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"D");
input->value(S);
}

Fl_Button *c_btn=(Fl_Button *)0;

static void cb_c_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"C");
input->value(S);
}

Fl_Button *b_btn=(Fl_Button *)0;

static void cb_b_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"B");
input->value(S);
}

Fl_Button *a_btn=(Fl_Button *)0;

static void cb_a_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"A");
input->value(S);
}

Fl_Button *seven_btn=(Fl_Button *)0;

static void cb_seven_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"7");
input->value(S);
}

Fl_Button *eight_btn=(Fl_Button *)0;

static void cb_eight_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"8");
input->value(S);
}

Fl_Button *nine_btn=(Fl_Button *)0;

static void cb_nine_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"9");
input->value(S);
}

Fl_Button *four_btn=(Fl_Button *)0;

static void cb_four_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"4");
input->value(S);
}

Fl_Button *five_btn=(Fl_Button *)0;

static void cb_five_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"5");
input->value(S);
}

Fl_Button *six_btn=(Fl_Button *)0;

static void cb_six_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"6");
input->value(S);
}

Fl_Button *one_btn=(Fl_Button *)0;

static void cb_one_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"1");
input->value(S);
}

Fl_Button *two_btn=(Fl_Button *)0;

static void cb_two_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"2");
input->value(S);
}

Fl_Button *three_btn=(Fl_Button *)0;

static void cb_three_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"3");
input->value(S);
}

Fl_Button *multiply_btn=(Fl_Button *)0;

static void cb_multiply_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"*");
input->value(S);
}

Fl_Button *div_btn=(Fl_Button *)0;

static void cb_div_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"/");
input->value(S);
}

Fl_Button *plus_btn=(Fl_Button *)0;

static void cb_plus_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"+");
input->value(S);
}

Fl_Button *minus_btn=(Fl_Button *)0;

static void cb_minus_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"-");
input->value(S);
}

Fl_Button *equal_btn=(Fl_Button *)0;

static void cb_equal_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"=");
input->value(S);
}

Fl_Button *dot_btn=(Fl_Button *)0;

static void cb_dot_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,".");
input->value(S);
}

Fl_Button *zero_btn=(Fl_Button *)0;

static void cb_zero_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"0");
input->value(S);
}

Fl_Button *del_btn=(Fl_Button *)0;

static void cb_del_btn(Fl_Button*, void*) {
  strcpy(S,input->value());
int i=strlen(S);
S[--i]=0;
input->value(S);
}

Fl_Button *pi_btn=(Fl_Button *)0;

static void cb_pi_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"PI");
input->value(S);
}

Fl_Button *Ebig_btn=(Fl_Button *)0;

static void cb_Ebig_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"E");
input->value(S);
}

Fl_Button *log_btn=(Fl_Button *)0;

static void cb_log_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"log(");
input->value(S);
}

Fl_Button *tan_btn=(Fl_Button *)0;

static void cb_tan_btn(Fl_Button*, void*) {
  strcpy(S, input->value());
strcat(S,"tan(");
input->value(S);
}

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(260, 320, ":: Calculator ::");
    w = o; if (w) {/* empty */}
    o->color((Fl_Color)40);
    { input = new Fl_Input(5, 11, 250, 25, "Input ");
      input->tooltip("Input field");
      input->box(FL_PLASTIC_DOWN_BOX);
      input->labelsize(11);
      input->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input* input
    { calc_btn = new Fl_Button(4, 43, 36, 30, "Calc");
      calc_btn->tooltip("Start calculation process");
      calc_btn->box(FL_PLASTIC_UP_BOX);
      calc_btn->shortcut(0x4ff0d);
      calc_btn->color((Fl_Color)48);
      calc_btn->labelfont(1);
      calc_btn->labelsize(13);
      calc_btn->callback((Fl_Callback*)cb_calc_btn);
    } // Fl_Button* calc_btn
    { result = new Fl_Input(45, 48, 210, 25, "Result");
      result->tooltip("Result field");
      result->box(FL_PLASTIC_DOWN_BOX);
      result->labelsize(10);
      result->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input* result
    { history = new Fl_Browser(5, 85, 250, 80, "History");
      history->tooltip("Log");
      history->box(FL_PLASTIC_DOWN_BOX);
      history->labelsize(10);
      history->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* history
    { off_btn = new Fl_Button(5, 170, 30, 25, "Off");
      off_btn->tooltip("Shutdown calculator");
      off_btn->box(FL_PLASTIC_UP_BOX);
      off_btn->shortcut(0x40071);
      off_btn->labelsize(10);
      off_btn->labelcolor((Fl_Color)1);
      off_btn->callback((Fl_Callback*)cb_off_btn);
    } // Fl_Button* off_btn
    { clear_btn = new Fl_Button(40, 170, 25, 25, "C");
      clear_btn->tooltip("Clear input field");
      clear_btn->box(FL_PLASTIC_UP_BOX);
      clear_btn->shortcut(0x80063);
      clear_btn->labelsize(10);
      clear_btn->labelcolor((Fl_Color)4);
      clear_btn->callback((Fl_Callback*)cb_clear_btn);
    } // Fl_Button* clear_btn
    { ac_btn = new Fl_Button(70, 170, 25, 25, "AC");
      ac_btn->tooltip("Clear all fields");
      ac_btn->box(FL_PLASTIC_UP_BOX);
      ac_btn->shortcut(0xc0063);
      ac_btn->labelsize(10);
      ac_btn->labelcolor((Fl_Color)4);
      ac_btn->callback((Fl_Callback*)cb_ac_btn);
    } // Fl_Button* ac_btn
    { sin_btn = new Fl_Button(40, 260, 25, 25, "&Sin");
      sin_btn->box(FL_PLASTIC_UP_BOX);
      sin_btn->shortcut(0x10073);
      sin_btn->labelsize(10);
      sin_btn->callback((Fl_Callback*)cb_sin_btn);
    } // Fl_Button* sin_btn
    { arc_btn = new Fl_Button(5, 260, 30, 25, "&Arc");
      arc_btn->box(FL_PLASTIC_UP_BOX);
      arc_btn->shortcut(0x10061);
      arc_btn->labelsize(10);
      arc_btn->callback((Fl_Callback*)cb_arc_btn);
    } // Fl_Button* arc_btn
    { cos_btn = new Fl_Button(70, 260, 25, 25, "&Cos");
      cos_btn->box(FL_PLASTIC_UP_BOX);
      cos_btn->shortcut(0x10063);
      cos_btn->labelsize(10);
      cos_btn->callback((Fl_Callback*)cb_cos_btn);
    } // Fl_Button* cos_btn
    { ln_btn = new Fl_Button(40, 200, 25, 25, "L&n");
      ln_btn->box(FL_PLASTIC_UP_BOX);
      ln_btn->shortcut(0x1006e);
      ln_btn->labelsize(10);
      ln_btn->callback((Fl_Callback*)cb_ln_btn);
    } // Fl_Button* ln_btn
    { lg_btn = new Fl_Button(5, 230, 30, 25, "L&g");
      lg_btn->box(FL_PLASTIC_UP_BOX);
      lg_btn->shortcut(0x10067);
      lg_btn->labelsize(10);
      lg_btn->callback((Fl_Callback*)cb_lg_btn);
    } // Fl_Button* lg_btn
    { fact_btn = new Fl_Button(40, 230, 25, 25, "n!");
      fact_btn->box(FL_PLASTIC_UP_BOX);
      fact_btn->shortcut(0x21);
      fact_btn->labelsize(10);
      fact_btn->callback((Fl_Callback*)cb_fact_btn);
    } // Fl_Button* fact_btn
    { power_btn = new Fl_Button(70, 200, 25, 25, "e^x");
      power_btn->box(FL_PLASTIC_UP_BOX);
      power_btn->shortcut(0x5e);
      power_btn->labelsize(10);
      power_btn->callback((Fl_Callback*)cb_power_btn);
    } // Fl_Button* power_btn
    { sqrt_btn = new Fl_Button(70, 230, 25, 25, "S&qrt");
      sqrt_btn->box(FL_PLASTIC_UP_BOX);
      sqrt_btn->shortcut(0x10071);
      sqrt_btn->labelsize(10);
      sqrt_btn->callback((Fl_Callback*)cb_sqrt_btn);
    } // Fl_Button* sqrt_btn
    { lftbrk_btn = new Fl_Button(70, 290, 25, 25, "(");
      lftbrk_btn->box(FL_PLASTIC_UP_BOX);
      lftbrk_btn->labelsize(10);
      lftbrk_btn->callback((Fl_Callback*)cb_lftbrk_btn);
    } // Fl_Button* lftbrk_btn
    { rghtbrk_btn = new Fl_Button(100, 290, 25, 25, ")");
      rghtbrk_btn->box(FL_PLASTIC_UP_BOX);
      rghtbrk_btn->labelsize(10);
      rghtbrk_btn->callback((Fl_Callback*)cb_rghtbrk_btn);
    } // Fl_Button* rghtbrk_btn
    { space_btn = new Fl_Button(5, 290, 60, 25, "Space");
      space_btn->box(FL_PLASTIC_UP_BOX);
      space_btn->shortcut(0x20);
      space_btn->labelsize(10);
      space_btn->callback((Fl_Callback*)cb_space_btn);
    } // Fl_Button* space_btn
    { d_btn = new Fl_Button(230, 170, 25, 25, "D");
      d_btn->box(FL_PLASTIC_UP_BOX);
      d_btn->shortcut(0x64);
      d_btn->labelsize(12);
      d_btn->callback((Fl_Callback*)cb_d_btn);
    } // Fl_Button* d_btn
    { c_btn = new Fl_Button(200, 170, 25, 25, "C");
      c_btn->box(FL_PLASTIC_UP_BOX);
      c_btn->shortcut(0x63);
      c_btn->labelsize(12);
      c_btn->callback((Fl_Callback*)cb_c_btn);
    } // Fl_Button* c_btn
    { b_btn = new Fl_Button(170, 170, 25, 25, "B");
      b_btn->box(FL_PLASTIC_UP_BOX);
      b_btn->shortcut(0x62);
      b_btn->labelsize(12);
      b_btn->callback((Fl_Callback*)cb_b_btn);
    } // Fl_Button* b_btn
    { a_btn = new Fl_Button(140, 170, 25, 25, "A");
      a_btn->box(FL_PLASTIC_UP_BOX);
      a_btn->shortcut(0x61);
      a_btn->labelsize(12);
      a_btn->callback((Fl_Callback*)cb_a_btn);
    } // Fl_Button* a_btn
    { seven_btn = new Fl_Button(140, 200, 25, 25, "7");
      seven_btn->box(FL_PLASTIC_UP_BOX);
      seven_btn->shortcut(0x37);
      seven_btn->labelsize(12);
      seven_btn->callback((Fl_Callback*)cb_seven_btn);
    } // Fl_Button* seven_btn
    { eight_btn = new Fl_Button(170, 200, 25, 25, "8");
      eight_btn->box(FL_PLASTIC_UP_BOX);
      eight_btn->shortcut(0x38);
      eight_btn->labelsize(12);
      eight_btn->callback((Fl_Callback*)cb_eight_btn);
    } // Fl_Button* eight_btn
    { nine_btn = new Fl_Button(200, 200, 25, 25, "9");
      nine_btn->box(FL_PLASTIC_UP_BOX);
      nine_btn->shortcut(0x39);
      nine_btn->labelsize(12);
      nine_btn->callback((Fl_Callback*)cb_nine_btn);
    } // Fl_Button* nine_btn
    { four_btn = new Fl_Button(140, 230, 25, 25, "4");
      four_btn->box(FL_PLASTIC_UP_BOX);
      four_btn->shortcut(0x34);
      four_btn->labelsize(12);
      four_btn->callback((Fl_Callback*)cb_four_btn);
    } // Fl_Button* four_btn
    { five_btn = new Fl_Button(170, 230, 25, 25, "5");
      five_btn->box(FL_PLASTIC_UP_BOX);
      five_btn->shortcut(0x35);
      five_btn->labelsize(12);
      five_btn->callback((Fl_Callback*)cb_five_btn);
    } // Fl_Button* five_btn
    { six_btn = new Fl_Button(200, 230, 25, 25, "6");
      six_btn->box(FL_PLASTIC_UP_BOX);
      six_btn->shortcut(0x36);
      six_btn->labelsize(12);
      six_btn->callback((Fl_Callback*)cb_six_btn);
    } // Fl_Button* six_btn
    { one_btn = new Fl_Button(140, 260, 25, 25, "1");
      one_btn->box(FL_PLASTIC_UP_BOX);
      one_btn->shortcut(0x31);
      one_btn->labelsize(12);
      one_btn->callback((Fl_Callback*)cb_one_btn);
    } // Fl_Button* one_btn
    { two_btn = new Fl_Button(170, 260, 25, 25, "2");
      two_btn->box(FL_PLASTIC_UP_BOX);
      two_btn->shortcut(0x32);
      two_btn->labelsize(12);
      two_btn->callback((Fl_Callback*)cb_two_btn);
    } // Fl_Button* two_btn
    { three_btn = new Fl_Button(200, 260, 25, 25, "3");
      three_btn->box(FL_PLASTIC_UP_BOX);
      three_btn->shortcut(0x33);
      three_btn->labelsize(12);
      three_btn->callback((Fl_Callback*)cb_three_btn);
    } // Fl_Button* three_btn
    { multiply_btn = new Fl_Button(230, 200, 25, 25, "*");
      multiply_btn->box(FL_PLASTIC_UP_BOX);
      multiply_btn->shortcut(0x2a);
      multiply_btn->labelsize(12);
      multiply_btn->callback((Fl_Callback*)cb_multiply_btn);
    } // Fl_Button* multiply_btn
    { div_btn = new Fl_Button(230, 230, 25, 25, "/");
      div_btn->box(FL_PLASTIC_UP_BOX);
      div_btn->shortcut(0x2f);
      div_btn->labelsize(12);
      div_btn->callback((Fl_Callback*)cb_div_btn);
    } // Fl_Button* div_btn
    { plus_btn = new Fl_Button(230, 290, 25, 25, "+");
      plus_btn->box(FL_PLASTIC_UP_BOX);
      plus_btn->shortcut(0x2b);
      plus_btn->labelsize(12);
      plus_btn->callback((Fl_Callback*)cb_plus_btn);
    } // Fl_Button* plus_btn
    { minus_btn = new Fl_Button(230, 260, 25, 25, "-");
      minus_btn->box(FL_PLASTIC_UP_BOX);
      minus_btn->shortcut(0x2d);
      minus_btn->labelsize(12);
      minus_btn->callback((Fl_Callback*)cb_minus_btn);
    } // Fl_Button* minus_btn
    { equal_btn = new Fl_Button(200, 290, 25, 25, "=");
      equal_btn->box(FL_PLASTIC_UP_BOX);
      equal_btn->shortcut(0xff8d);
      equal_btn->labelsize(12);
      equal_btn->callback((Fl_Callback*)cb_equal_btn);
    } // Fl_Button* equal_btn
    { dot_btn = new Fl_Button(170, 290, 25, 25, ".");
      dot_btn->box(FL_PLASTIC_UP_BOX);
      dot_btn->shortcut(0x8ffe4);
      dot_btn->labelsize(12);
      dot_btn->callback((Fl_Callback*)cb_dot_btn);
    } // Fl_Button* dot_btn
    { zero_btn = new Fl_Button(140, 290, 25, 25, "0");
      zero_btn->box(FL_PLASTIC_UP_BOX);
      zero_btn->shortcut(0x30);
      zero_btn->labelsize(12);
      zero_btn->callback((Fl_Callback*)cb_zero_btn);
    } // Fl_Button* zero_btn
    { del_btn = new Fl_Button(100, 170, 25, 25, "Del");
      del_btn->tooltip("Delete last symbol from input field");
      del_btn->box(FL_PLASTIC_UP_BOX);
      del_btn->shortcut(0xff08);
      del_btn->labelsize(12);
      del_btn->labelcolor((Fl_Color)4);
      del_btn->callback((Fl_Callback*)cb_del_btn);
    } // Fl_Button* del_btn
    { pi_btn = new Fl_Button(100, 200, 25, 25, "PI");
      pi_btn->tooltip("3.14");
      pi_btn->box(FL_PLASTIC_UP_BOX);
      pi_btn->labelsize(12);
      pi_btn->callback((Fl_Callback*)cb_pi_btn);
    } // Fl_Button* pi_btn
    { Ebig_btn = new Fl_Button(100, 230, 25, 25, "E");
      Ebig_btn->box(FL_PLASTIC_UP_BOX);
      Ebig_btn->labelsize(12);
      Ebig_btn->callback((Fl_Callback*)cb_Ebig_btn);
    } // Fl_Button* Ebig_btn
    { log_btn = new Fl_Button(5, 200, 30, 25, "L&og");
      log_btn->box(FL_PLASTIC_UP_BOX);
      log_btn->shortcut(0x10067);
      log_btn->labelsize(10);
      log_btn->callback((Fl_Callback*)cb_log_btn);
    } // Fl_Button* log_btn
    { tan_btn = new Fl_Button(100, 260, 25, 25, "&Tan");
      tan_btn->box(FL_PLASTIC_UP_BOX);
      tan_btn->shortcut(0x10063);
      tan_btn->labelsize(10);
      tan_btn->callback((Fl_Callback*)cb_tan_btn);
    } // Fl_Button* tan_btn
    o->end();
  } // Fl_Double_Window* o
  w->show(argc, argv);
  return Fl::run();
}
#if 1
#endif

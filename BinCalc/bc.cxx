// generated by Fast Light User Interface Designer (fluid) version 1.0308
#include "bc.h"
#include <math.h>
long a, b, c, razr = 32, syst;
Fl_Round_Button* A64[64], * B64[64], * C64[64],*A[32], * B[32], * C[32],*A16[16],*B16[16],*C16[16],*A8[8],*B8[8],*C8[8];

Fl_Button* butArr[12];

static void boxChanger()
{
	char str[50];
	a=0;
	b=0;
	for(int i =0; i<razr;i++)
	{
	switch (razr)
	{
	case 8:
		a+=A8[i]->value() * (1<<(razr-1-i));
		b+=B8[i]->value() * (1<<(razr-1-i));
		c+=C8[i]->value() * (1<<(razr-1-i));
		break;
	case 16:
		a+=A16[i]->value() * (1<<(razr-1-i));
		b+=B16[i]->value() * (1<<(razr-1-i));
		c+=C16[i]->value() * (1<<(razr-1-i));
		break;
	case 32:
		a+=A[i]->value() * (1<<(razr-1-i));
		b+=B[i]->value() * (1<<(razr-1-i));
		c+=C[i]->value() * (1<<(razr-1-i));
		break;
	case 64:
		a+=A64[i]->value() * (1<<(razr-1-i));
		b+=B64[i]->value() * (1<<(razr-1-i));
		c+=C64[i]->value() * (1<<(razr-1-i));
		break;

	}

		
	}
	switch (syst)
	{
		case 8: sprintf(str, "%o", a);vA->value((const char*)str);
				sprintf(str, "%o", b);vB->value((const char*)str);
				sprintf(str, "%o", c);vC->value((const char*)str);
				break;

		case 10: sprintf(str, "%d", a);vA->value((const char*)str);
				 sprintf(str, "%d", b);vB->value((const char*)str);
				 sprintf(str, "%d", c);vC->value((const char*)str);
				 break;

		case 16: sprintf(str, "%x", a);vA->value((const char*)str);
				 sprintf(str, "%x", b);vB->value((const char*)str);
				 sprintf(str, "%x", c);vC->value((const char*)str);
				 break;
				 
	}

	
};

static void cb_A(Fl_Round_Button*, void*) 
{
	boxChanger();
}

static void cb_B(Fl_Round_Button*, void*) 
{
	boxChanger();
}
static void cb_C(Fl_Round_Button*, void*) 
{
	boxChanger();
}

Fl_Input* vA = (Fl_Input*)0, * vB, * vC;

static void cb_vA(Fl_Input*, void*) {
		switch (syst)
	{
	case 10: sscanf(vA->value(),"%d",&a); break;
	case 16: sscanf(vA->value(),"%x",&a); break;
	case 8: sscanf(vA->value(),"%o",&a); break;
	}
	switch (razr)
	{
		case 8:	
		for (int i = 0; i < razr; i++)
		(((char)a) & (1 << i)) == 0 ? A8[razr-1-i]->clear() : A8[razr-1-i]->set();	break;
		case 16:	
		for (int i = 0; i < razr; i++)
		(((short)a) & (1 << i)) == 0 ? A16[razr-1-i]->clear() : A16[razr-1-i]->set();	break;
		case 32:	
		for (int i = 0; i < razr; i++)
		(((int)a) & (1 << i)) == 0 ? A[razr-1-i]->clear() : A[razr-1-i]->set();	break;
		case 64:	
		for (int i = 0; i < razr; i++)
		(a & (1 << i)) == 0 ? A64[razr-1-i]->clear() : A64[razr-1-i]->set();	break;
	}

}
static void cb_vB(Fl_Input*, void*) {
		switch (syst)
	{
	case 10: sscanf(vB->value(),"%d",&b); break;
	case 16: sscanf(vB->value(),"%x",&b); break;
	case 8: sscanf(vB->value(),"%o",&b); break;
	}
	switch (razr)
	{
		case 8:	
		for (int i = 0; i < razr; i++)
		(((char)b) & (1 << i)) == 0 ? B8[razr-1-i]->clear() : B8[razr-1-i]->set();	break;
		case 16:	
		for (int i = 0; i < razr; i++)
		(((short)b) & (1 << i)) == 0 ? B16[razr-1-i]->clear() : B16[razr-1-i]->set();	break;
		case 32:	
		for (int i = 0; i < razr; i++)
		(((int)b) & (1 << i)) == 0 ? B[razr-1-i]->clear() : B[razr-1-i]->set();	break;
		case 64:	
		for (int i = 0; i < razr; i++)
		(b & (1 << i)) == 0 ? B64[razr-1-i]->clear() : B64[razr-1-i]->set();	break;
	}
}

static void cb_vC() {

	switch (razr)
	{
		case 8:	
		for (int i = 0; i < razr; i++)
		(((char)c) & (1 << i)) == 0 ? C8[razr-1-i]->clear() : C8[razr-1-i]->set();	break;
		case 16:	
		for (int i = 0; i < razr; i++)
		(((short)c) & (1 << i)) == 0 ? C16[razr-1-i]->clear() : C16[razr-1-i]->set();	break;
		case 32:	
		for (int i = 0; i < razr; i++)
		(((int)c) & (1 << i)) == 0 ? C[razr-1-i]->clear() : C[razr-1-i]->set();	break;
		case 64:	
		for (int i = 0; i < razr; i++)
		(c & (1 << i)) == 0 ? C64[razr-1-i]->clear() : C64[razr-1-i]->set();	break;
	}

}

static void reCalc() {

	switch (razr)
	{
		case 8:	
		for (int i = 0; i < razr; i++)
		{
			(((char)a) & (1 << i)) == 0 ? A8[razr-1-i]->clear() : A8[razr-1-i]->set();
			(((char)b) & (1 << i)) == 0 ? B8[razr-1-i]->clear() : B8[razr-1-i]->set();
			(((char)c) & (1 << i)) == 0 ? C8[razr-1-i]->clear() : C8[razr-1-i]->set();	
			}
			break;
		case 16:	
		for (int i = 0; i < razr; i++)
		{
		(((short)a) & (1 << i)) == 0 ? A16[razr-1-i]->clear() : A16[razr-1-i]->set();
		(((short)b) & (1 << i)) == 0 ? B16[razr-1-i]->clear() : B16[razr-1-i]->set();
		(((short)c) & (1 << i)) == 0 ? C16[razr-1-i]->clear() : C16[razr-1-i]->set();
		}
			break;
		case 32:	
		for (int i = 0; i < razr; i++) {
		(((int)a) & (1 << i)) == 0 ? A[razr-1-i]->clear() : A[razr-1-i]->set();	
		(((int)b) & (1 << i)) == 0 ? B[razr-1-i]->clear() : B[razr-1-i]->set();	
		(((int)c) & (1 << i)) == 0 ? C[razr-1-i]->clear() : C[razr-1-i]->set();	
		}
		break;
		case 64:	
		for (int i = 0; i < razr; i++){
		(a & (1 << i)) == 0 ? A64[razr-1-i]->clear() : A64[razr-1-i]->set();	
		(b & (1 << i)) == 0 ? B64[razr-1-i]->clear() : B64[razr-1-i]->set();	
		(c & (1 << i)) == 0 ? C64[razr-1-i]->clear() : C64[razr-1-i]->set();	
		}
		break;
	}

}

Fl_Button* Syst = (Fl_Button*)0;

Fl_Button* Razr = (Fl_Button*)0;

Fl_Button* Op = (Fl_Button*)0;

static void cb_op(Fl_Button* but, void*) {
	char str[50];

	
	switch(but->x()+but->y())
	{
	case 160: c=a+b; break; //+
	case 190: c=a-b;break; //-
	case 220: c=a*b;break; //*
	case 250: c=a/b;break; // /
	case 280: c=a%b;break; // %
	case 310: c=pow(a,b);break; // ^

	case 200: c=a<<b;break; // <<
	case 230: c=a>>b;break; // >>
	case 260: c=~a;break; // !A
	case 290: c=~b;break; // !B
	case 320: c=a&b;break; // &
	case 350: c=a|b;break; // |	
	
	}
	

	switch (syst)
	{
	case 10: sprintf(str, "%d", c); break;
	case 16: sprintf(str, "%x", c); break;
	case 8: sprintf(str, "%o", c); break;
	}
	vC->value((const char*)str);

	cb_vC();

	


}
static void cb_Syst(Fl_Button* BB, void*) {
	if (strcmp(BB->label(), "8") == 0)
	{
		syst = 10; BB->label("10");
	}
	else
		if (strcmp(BB->label(), "10") == 0)
		{
			syst = 16; BB->label("16");
		}
		else
			if (strcmp(BB->label(), "16") == 0)
			{
				syst = 8; BB->label("8");
			}
	cb_B(NULL, NULL); cb_A(NULL, NULL);cb_C(NULL,NULL);
}

static void cb_Raz(Fl_Round_Button*, void*) 
{
	for (int i = 0; i < 8; i++)
	{
		A[i]->hide();
		B[i]->hide();
		C[i]->hide();

		A8[i]->hide();
		B8[i]->hide();
		C8[i]->hide();

		A16[i]->hide();
		B16[i]->hide();
		C16[i]->hide();

		A64[i]->hide();
		B64[i]->hide();
		C64[i]->hide();
	}
	for (int i = 8; i < 16; i++)
	{
		A16[i]->hide();
		B16[i]->hide();
		C16[i]->hide();

		A[i]->hide();
		B[i]->hide();
		C[i]->hide();

		A64[i]->hide();
		B64[i]->hide();
		C64[i]->hide();
	}
	for (int i = 16; i < 32; i++)
	{
		A[i]->hide();
		B[i]->hide();
		C[i]->hide();

		A64[i]->hide();
		B64[i]->hide();
		C64[i]->hide();
	}
	for (int i = 32; i < 64; i++)
	{
		A64[i]->hide();
		B64[i]->hide();
		C64[i]->hide();
	}

	switch (razr)
	{
		case 8: Razr->label("16");razr=16;for(int i=0;i<razr;i++){A16[i]->show();B16[i]->show();C16[i]->show();}break;
		case 16: Razr->label("32");razr=32;for(int i=0;i<razr;i++){A[i]->show();B[i]->show();C[i]->show();}break;
		case 32: Razr->label("64");razr=64;for(int i=0;i<razr;i++){A64[i]->show();B64[i]->show();C64[i]->show();}break;
		case 64: Razr->label("8");razr=8;for(int i=0;i<razr;i++){A8[i]->show();B8[i]->show();C8[i]->show();}break;
	}

	reCalc();
	//boxChanger();
}

int main(int argc, char** argv) {
	Fl_Double_Window* w;
	{ Fl_Double_Window* o = new Fl_Double_Window(950, 220);
	w = o; if (w) {/* empty */ }
	{
		for (int i = 0; i < 8; i++)
		{
			A8[i] = new Fl_Round_Button(5 + i * 100, 25, 20, 15);
			A8[i]->down_box(FL_ROUND_DOWN_BOX);
			A8[i]->callback((Fl_Callback*)cb_A);
			A8[i]->hide();

			B8[i] = new Fl_Round_Button(5 + i * 100, 55, 20, 15);
			B8[i]->down_box(FL_ROUND_DOWN_BOX);
			B8[i]->callback((Fl_Callback*)cb_B);
			B8[i]->hide();
		
			C8[i] = new Fl_Round_Button(5 + i * 100, 85, 20, 15);
			C8[i]->down_box(FL_ROUND_DOWN_BOX);
			C8[i]->callback((Fl_Callback*)cb_C);
			C8[i]->hide();
		}
		for (int i = 0; i < 16; i++)
		{
			A16[i] = new Fl_Round_Button(5 + i * 50, 25, 20, 15);
			A16[i]->down_box(FL_ROUND_DOWN_BOX);
			A16[i]->callback((Fl_Callback*)cb_A);
			A16[i]->hide();

			B16[i] = new Fl_Round_Button(5 + i * 50, 55, 20, 15);
			B16[i]->down_box(FL_ROUND_DOWN_BOX);
			B16[i]->callback((Fl_Callback*)cb_B);
			B16[i]->hide();
		
			C16[i] = new Fl_Round_Button(5 + i * 50, 85, 20, 15);
			C16[i]->down_box(FL_ROUND_DOWN_BOX);
			C16[i]->callback((Fl_Callback*)cb_C);
			C16[i]->hide();
		}
		for (int i = 0; i < 32; i++)
		{
			A[i] = new Fl_Round_Button(5 + i * 25, 25, 20, 15);
			A[i]->down_box(FL_ROUND_DOWN_BOX);
			A[i]->callback((Fl_Callback*)cb_A);

			B[i] = new Fl_Round_Button(5 + i * 25, 55, 20, 15);
			B[i]->down_box(FL_ROUND_DOWN_BOX);
			B[i]->callback((Fl_Callback*)cb_B);
		
			C[i] = new Fl_Round_Button(5 + i * 25, 85, 20, 15);
			C[i]->down_box(FL_ROUND_DOWN_BOX);
			C[i]->callback((Fl_Callback*)cb_C);
		}
		for (int i = 0; i < 64; i++)
		{
			A64[i] = new Fl_Round_Button(5 + i * 13, 25, 20, 15);
			A64[i]->down_box(FL_ROUND_DOWN_BOX);
			A64[i]->callback((Fl_Callback*)cb_A);
			A64[i]->hide();

			B64[i] = new Fl_Round_Button(5 + i * 13, 55, 20, 15);
			B64[i]->down_box(FL_ROUND_DOWN_BOX);
			B64[i]->callback((Fl_Callback*)cb_B);
			B64[i]->hide();
		
			C64[i] = new Fl_Round_Button(5 + i * 13, 85, 20, 15);
			C64[i]->down_box(FL_ROUND_DOWN_BOX);
			C64[i]->callback((Fl_Callback*)cb_C);
			C64[i]->hide();
		}
	}
	{
		vA = new Fl_Input(850, 20, 90, 25);
		vA->callback((Fl_Callback*)cb_vA);
	} // Fl_Input* vA
	{
		vB = new Fl_Input(850, 55, 90, 25);
		vB->callback((Fl_Callback*)cb_vB);
	} // Fl_Input* vA
	{
		vC = new Fl_Input(850, 85, 90, 25);
	} // Fl_Input* vA

	{ Syst = new Fl_Button(670, 5, 70, 20, "10");
	Syst->callback((Fl_Callback*)cb_Syst);
	syst = 10;
	} // Fl_Button* syst
	{ 
		Razr = new Fl_Button(355, 10, 70, 20, "32");
		Razr->callback((Fl_Callback*)cb_Raz);
	} // Fl_Button* razr
	{
		for (int i = 1; i < 13; i++)
		{
		if ((i-6 < 1))
				Op = new Fl_Button(i * 30, 130, 35, 25);
			else
				Op = new Fl_Button((i - 6) * 30, 170, 35, 25);

			switch (i)
			{
			case 1:Op->label("+");break;
			case 2:Op->label("-");break;
			case 3:Op->label("*");break;
			case 4:Op->label("/");break;
			case 5:Op->label("%");break;
			case 6:Op->label("^");break;
			case 7:Op->label("<<");break;
			case 8:Op->label(">>");break;
			case 9:Op->label("~A");break;
			case 10:Op->label("~B");break;
			case 11:Op->label("&");break;
			case 12:Op->label("|");break;

			}
			
			Op->callback((Fl_Callback*)cb_op);

		}
	} // Fl_Button* op
	o->end();
	} // Fl_Double_Window* o
	w->show(argc, argv);
	return Fl::run();
}
